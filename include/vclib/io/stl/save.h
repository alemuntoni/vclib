/*****************************************************************************
 * VCLib                                                                     *
 * Visual Computing Library                                                  *
 *                                                                           *
 * Copyright(C) 2021-2023                                                    *
 * Alessandro Muntoni                                                        *
 * Visual Computing Lab                                                      *
 * ISTI - Italian National Research Council                                  *
 *                                                                           *
 * All rights reserved.                                                      *
 *                                                                           *
 * This program is free software; you can redistribute it and/or modify      *
 * it under the terms of the GNU General Public License as published by      *
 * the Free Software Foundation; either version 3 of the License, or         *
 * (at your option) any later version.                                       *
 *                                                                           *
 * This program is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              *
 * GNU General Public License (http://www.gnu.org/licenses/gpl.txt)          *
 * for more details.                                                         *
 ****************************************************************************/

#ifndef VCL_IO_STL_SAVE_H
#define VCL_IO_STL_SAVE_H

#include <vclib/algorithms/polygon.h>
#include <vclib/misc/logger.h>
#include <vclib/misc/mesh_info.h>

#include "../detail/io_utils.h"
#include "../detail/io_write.h"

namespace vcl::io {

namespace detail {

void writeStlHeader(std::ofstream& fp, bool magicsMode, bool binary)
{
    std::string header = "solid STL generated by VCLib";
    if (binary) {
        if (magicsMode) {
            std::string p;
            for (uint i = 0; i < 3; i++)
                p.push_back((char)0x7f);
            header = "COLOR=" + p + " MATERIAL=" + p + " " + p + " " + p;
        }
        while (header.size() < 80)
            header.push_back(' ');
    }

    fp << header;
    if (!binary)
        fp << std::endl;
}

template<Point3Concept PointType, Point3Concept NormalType>
void writeTriangle(
    std::ofstream& fp,
    const PointType& p0,
    const PointType& p1,
    const PointType& p2,
    const NormalType& n,
    uint attributes,
    bool binary)
{
    if (binary) {
        for (uint i = 0; i < 3; ++i)
            detail::writeFloat(fp, n[i]);

        for (uint i = 0; i < 3; ++i)
            detail::writeFloat(fp, p0[i]);

        for (uint i = 0; i < 3; ++i)
            detail::writeFloat(fp, p1[i]);

        for (uint i = 0; i < 3; ++i)
            detail::writeFloat(fp, p2[i]);

        detail::writeUShort(fp, attributes);
    }
    else {
        fp << "  facet normal " << n.x() << " " << n.y() << " " << n.z()
           << std::endl;
        fp << "    outer loop" << std::endl;

        fp << "      vertex " << p0.x() << " " << p0.y() << " " << p0.z()
           << std::endl;
        fp << "      vertex " << p1.x() << " " << p1.y() << " " << p1.z()
           << std::endl;
        fp << "      vertex " << p2.x() << " " << p2.y() << " " << p2.z()
           << std::endl;

        fp << "    endloop" << std::endl;
        fp << "  endfacet" << std::endl;
    }
}

} // namespace vcl::io::detail

/**
 * @brief saveStl
 * @param m
 * @param filename
 * @param info
 * @param[in] magicsMode: indicates whether the STL file should be saved in
 * Magics mode or not. Magics mode is a specific file format used by the Magics
 * software, which includes more information than the standard STL format, like
 * face colors. The magicsMode works only when binary flag is set to `true`.
 * @param binary
 */
template<MeshConcept MeshType, LoggerConcept LogType = NullLogger>
void saveStl(
    const MeshType&    m,
    const std::string& filename,
    const MeshInfo&    info,
    LogType&           log        = nullLogger,
    bool               binary     = true,
    bool               magicsMode = false)
{
    MeshInfo meshInfo(m);

    // make sure that the given info contains only components that are actually
    // available in the mesh. meshInfo will contain the intersection between the
    // components that the user wants to save and the components that are
    // available in the mesh.
    meshInfo = info.intersect(meshInfo);

    std::ofstream fp = detail::saveFileStream(filename, "stl");

    if constexpr (isLoggerValid<LogType>()) {
        log.log(0, "Saving STL file");
    }

    detail::writeStlHeader(fp, magicsMode, binary);

    if constexpr (HasFaces<MeshType>) {
        using FaceType = MeshType::FaceType;

        if (binary) {
            detail::writeInt(fp, m.faceNumber());
        }

        if constexpr (vcl::isLoggerValid<LogType>()) {
            log.startProgress("Loading STL file", m.faces());
        }

        for (const FaceType& f : m.faces()) {
            // For each triangle write the normal, the three coords and a short
            auto n = vcl::faceNormal(f);

            unsigned short attributes = 0;

            if constexpr (HasPerFaceColor<MeshType>) {
                if (meshInfo.hasFaceColors()) {
                    if(magicsMode)
                        attributes = 32768 | f.color().toUnsignedR5G5B5();
                    else
                        attributes = 32768 | f.color().toUnsignedB5G5R5();
                }
            }

            if (f.vertexNumber() == 3) {
                detail::writeTriangle(
                    fp,
                    f.vertex(0)->coord(),
                    f.vertex(1)->coord(),
                    f.vertex(2)->coord(),
                    n,
                    attributes,
                    binary);
            }
            else {
                std::vector<uint> tris = vcl::earCut(f);
                for (uint i = 0; i < tris.size(); i += 3) {
                    detail::writeTriangle(
                        fp,
                        f.vertex(tris[i])->coord(),
                        f.vertex(tris[i + 1])->coord(),
                        f.vertex(tris[i + 2])->coord(),
                        n,
                        attributes,
                        binary);
                }
            }

            if constexpr (vcl::isLoggerValid<LogType>()) {
                log.progress(m.index(f));
            }
        }
        if constexpr (vcl::isLoggerValid<LogType>()) {
            log.endProgress();
        }
    }

    if (!binary) {
        fp << "endsolid VCLib" << std::endl;
    }

    fp.close();
}

/**
 * @brief saveStl
 * @param m
 * @param filename
 * @param[in] magicsMode: indicates whether the STL file should be saved in
 * Magics mode or not. Magics mode is a specific file format used by the Magics
 * software, which includes more information than the standard STL format, like
 * face colors. The magicsMode works only when binary flag is set to `true`.
 * @param binary
 */
template<MeshConcept MeshType, LoggerConcept LogType = NullLogger>
void saveStl(
    const MeshType&    m,
    const std::string& filename,
    LogType&           log        = nullLogger,
    bool               binary     = true,
    bool               magicsMode = false)
{
    MeshInfo info(m);
    saveStl(m, filename, info, log, binary, magicsMode);
}

} // namespace vcl::io

#endif // VCL_IO_STL_SAVE_H
