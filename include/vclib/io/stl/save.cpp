/*****************************************************************************
 * VCLib                                                                     *
 * Visual Computing Library                                                  *
 *                                                                           *
 * Copyright(C) 2021-2023                                                    *
 * Alessandro Muntoni                                                        *
 * Visual Computing Lab                                                      *
 * ISTI - Italian National Research Council                                  *
 *                                                                           *
 * All rights reserved.                                                      *
 *                                                                           *
 * This program is free software; you can redistribute it and/or modify      *
 * it under the terms of the GNU General Public License as published by      *
 * the Free Software Foundation; either version 3 of the License, or         *
 * (at your option) any later version.                                       *
 *                                                                           *
 * This program is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              *
 * GNU General Public License (http://www.gnu.org/licenses/gpl.txt)          *
 * for more details.                                                         *
 ****************************************************************************/

#include "save.h"

#include "../internal/io_utils.h"
#include "../internal/io_write.h"

namespace vcl::io {

namespace internal {

void writeStlHeader(std::ofstream& fp, bool magicsMode, bool binary)
{
	std::string header = "solid STL generated by VCLib";
	if (binary) {
		if (magicsMode) {
			std::string p;
			for (uint i = 0; i < 3; i++)
				p.push_back((char)0x7f);
			header = "COLOR=" + p + " MATERIAL=" + p + " " + p + " " + p;
		}
		while (header.size() < 80)
			header.push_back(' ');
	}

	fp << header;
	if (!binary)
		fp << std::endl;
}

}

/**
 * @brief saveStl
 * @param m
 * @param filename
 * @param[in,opt] magicsMode: indicates whether the STL file should be saved in Magics mode or not.
 * Magics mode is a specific file format used by the Magics software, which includes more
 * information than the standard STL format, like face colors. The magicsMode works only when binary
 * flag is set to `true`.
 * @param binary
 */
template<MeshConcept MeshType>
void saveStl(const MeshType& m, const std::string& filename, bool magicsMode, bool binary)
{
	FileMeshInfo info(m);
	saveStl(m, filename, info, binary, magicsMode);
}

/**
 * @brief saveStl
 * @param m
 * @param filename
 * @param info
 * @param[in,opt] magicsMode: indicates whether the STL file should be saved in Magics mode or not.
 * Magics mode is a specific file format used by the Magics software, which includes more
 * information than the standard STL format, like face colors. The magicsMode works only when binary
 * flag is set to `true`.
 * @param binary
 */
template<MeshConcept MeshType>
void saveStl(
	const MeshType&     m,
	const std::string&  filename,
	const FileMeshInfo& info,
	bool                magicsMode,
	bool                binary)
{
	FileMeshInfo meshInfo(m);

	// make sure that the given info contains only components that are actually available in the
	// mesh. meshInfo will contain the intersection between the components that the user wants to
	// save and the components that are available in the mesh.
	meshInfo = info.intersect(meshInfo);

	std::ofstream fp = internal::saveFileStream(filename, "stl");

	internal::writeStlHeader(fp, magicsMode, binary);

	if constexpr (HasFaces<MeshType>) {
		using FaceType = typename MeshType::FaceType;

		if (binary) {
			internal::writeInt(fp, m.faceNumber());
		}

		for (const FaceType& f : m.faces()) {
			//todo
		}
	}

	fp.close();
}

} // namespace vcl::io

