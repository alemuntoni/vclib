/*****************************************************************************
 * VCLib                                                                     *
 * Visual Computing Library                                                  *
 *                                                                           *
 * Copyright(C) 2021-2024                                                    *
 * Visual Computing Lab                                                      *
 * ISTI - Italian National Research Council                                  *
 *                                                                           *
 * All rights reserved.                                                      *
 *                                                                           *
 * This program is free software; you can redistribute it and/or modify      *
 * it under the terms of the Mozilla Public License Version 2.0 as published *
 * by the Mozilla Foundation; either version 2 of the License, or            *
 * (at your option) any later version.                                       *
 *                                                                           *
 * This program is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              *
 * Mozilla Public License Version 2.0                                        *
 * (https://www.mozilla.org/en-US/MPL/2.0/) for more details.                *
 ****************************************************************************/

#ifndef VCL_PROCESSING_ACTIONS_INTERFACES_MESH_ACTION_H
#define VCL_PROCESSING_ACTIONS_INTERFACES_MESH_ACTION_H

#include <vclib/processing/actions/common/parameter_vector.h>
#include <vclib/processing/meshes/abstract_mesh.h>
#include <vclib/space/bit_set.h>

#include "action.h"

namespace vcl {

class MeshAction : public Action {
public:
    MeshAction() = default;
    virtual ~MeshAction() = default;

    /**
     * @brief Returns the number of input meshes required by the action.
     *
     * @return The number of input meshes required by the action.
     */
    virtual uint inputMeshNumber() const = 0;

    /**
     * @brief Returns the number of output meshes generated by the action.
     *
     * @return The number of output meshes generated by the action.
     */
    virtual uint outputMeshNumber() const = 0;

    /**
     * @brief Given the index of the input mesh of the action, returns a BitSet
     * that tells, for each mesh type, if the action supports it or not.
     *
     * By default, all mesh types are supported.
     *
     * You should override this method if your action does not support all mesh
     * types.
     *
     * @return A BitSet with the supported mesh types.
     */
    virtual vcl::BitSet<short> supportedInputMeshTypes(uint i) const
    {
        if (i >= inputMeshNumber()) {
            throw std::runtime_error("Invalid input mesh index");
        }
        vcl::BitSet<short> bs;
        bs.set();
        return bs;
    }

    /**
     * @brief Given the index of the output mesh of the action, returns a BitSet
     * that tells, for each mesh type, if the action supports it or not.
     *
     * By default, all mesh types are supported.
     *
     * You should override this method if your action does not support all mesh
     * types.
     *
     * @return A BitSet with the supported mesh types.
     */
    virtual vcl::BitSet<short> supportedOutputMeshTypes(uint i) const
    {
        if (i >= outputMeshNumber()) {
            throw std::runtime_error("Invalid output mesh index");
        }
        vcl::BitSet<short> bs;
        bs.set();
        return bs;
    }

    /**
     * @brief Returns the parameters of the action.
     *
     * By default, the action has no parameters.
     *
     * You should override this method if your action has parameters.
     *
     * @return The parameters of the action.
     */
    virtual ParameterVector parameters() const
    {
        return ParameterVector();
    }
};

} // namespace vcl

#endif // VCL_PROCESSING_ACTIONS_INTERFACES_MESH_ACTION_H
