name: Core - Build and run Tests

on:
  [push, pull_request]

jobs:
  core_build_and_run_tests:
    name: Core - Build and run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'ubuntu-24.04-arm', 'macos-13', 'macos-latest', 'windows-latest']
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    - name: Install dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install cmake ninja-build libtbb-dev catch2
        # install g++-14 and make it default
        sudo apt-get install g++-14
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
    - name: Install dependencies
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install catch2
        # latest version tested: xcode 16.4 with clang version 17
        # install latest llvm and set llvm clang as default compiler
        brew install llvm
    - name: Install dependencies
      if: runner.os == 'Windows'
      run: |
        choco upgrade ccache ninja
    - name: Ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: core-${{ matrix.os }}-${{ github.ref_name }}
    - name: Build
      shell: bash
      run: |
        mkdir build
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          export LLVM_PATH="$(brew --prefix llvm)"
          export CC="$LLVM_PATH/bin/clang"
          export CXX="$LLVM_PATH/bin/clang++"
          cmake -B build --preset=vclib-core-ci \
            -DCMAKE_C_COMPILER="$CC" -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          cmake -B build --preset=vclib-core-ci
        else
          cmake -B build --preset=vclib-core-ci \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        fi
        cmake --build build --parallel
    - name: Run Tests
      shell: bash
      run: |
        cd build
        ctest --verbose
